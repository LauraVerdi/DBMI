(harvardmed) Lauras-MBP:demo lverdibe$ cd ../LaurasForms/
(harvardmed) Lauras-MBP:LaurasForms lverdibe$ python manage.py createsuperuser
Username (leave blank to use 'lverdibe'): admin
Email address: admin@admin.com
Password: 
Password (again): 
Superuser created successfully.

>>> ParticipantInfo.objects.create(participant_name='Charlie Chaplin', participant_age="99")
<ParticipantInfo: Charlie Chaplin>
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: admin>]>
>>> ParticipantInfo.objects.all()
<QuerySet [<ParticipantInfo: Jane Doe>, <ParticipantInfo: arnold smith>, <ParticipantInfo: Filomina Davis>, <ParticipantInfo: Charlie Chaplin>]>
>>> ParticipantInfo.objects.filter(participant_name="Jane Doe")
<QuerySet [<ParticipantInfo: Jane Doe>]>
>>> p = ParticipantInfo.objects.all()
>>> p.print_participant_info()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'print_participant_info'
>>> p.print
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'print'
>>> p.print()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'print'
>>> print(p)
<QuerySet [<ParticipantInfo: Jane Doe>, <ParticipantInfo: arnold smith>, <ParticipantInfo: Filomina Davis>, <ParticipantInfo: Charlie Chaplin>]>
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> exit()

>>> for i in p:
...     print(i.participant_name)
...     print(i.participant_siblings)
... 
Jane Doe
No
arnold smith
No
Filomina Davis
No
Charlie Chaplin
No


python manage.py shell
>>> from participants.models import ParticipantInfo
>>> p = ParticipantInfo.objects.all()
>>> for i in p:
...     print(i)
... 
Jane Doe
arnold smith
Filomina Davis
Charlie Chaplin
Roy G Biv
bar
bar
bar
bar
food
food
food
food
food
food
food
food
food
food
food
food
food
>>> print(ParticipantInfo.objects.filter(participant_name='food'))
<QuerySet [<ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>]>
>>> print(ParticipantInfo.objects.filter(participant_name='food')).delete()
<QuerySet [<ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>, <ParticipantInfo: food>]>
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'delete'
>>> ParticipantInfo.objects.filter(participant_name='food').delete()
(13, {'participants.ParticipantInfo': 13})
>>> for i in p:
...     print(i)
... 
Jane Doe
arnold smith
Filomina Davis
Charlie Chaplin
Roy G Biv
bar
bar
bar
bar
food
food
food
food
food
food
food
food
food
food
food
food
food
>>> print(p.count()
... )
22
>>> print(ParticipantInfo.objects.filter(participant_name='food'))
<QuerySet []>
>>> for i in p:
...     print(i.participant_name)
... 
Jane Doe
arnold smith
Filomina Davis
Charlie Chaplin
Roy G Biv
bar
bar
bar
bar
food
food
food
food
food
food
food
food
food
food
food
food
food
>>> ParticipantInfo.objects.filter(participant_name='food').delete()
(0, {'participants.ParticipantInfo': 0})
>>> ParticipantInfo.objects.filter(participant_name='bar').delete()
(4, {'participants.ParticipantInfo': 4})
>>> ParticipantInfo.objects.filter(participant_name='Roy G Biv').delete()
(1, {'participants.ParticipantInfo': 1})
>>> print(p.count()
... 
... )
22
>>> 

